// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client" // Opcional: si quieres el cliente en la raíz
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Carga desde backend/.env
}

// Modelo de Usuario para autenticación manual
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String // Guardaremos la contraseña hasheada aquí
  name           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  profiles Profile[] // Relación uno-a-muchos con Perfiles
}

// Modelo de Perfiles (igual que antes)
model Profile {
  id        String   @id @default(cuid())
  name      String
  userId    String // Clave foránea a User
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  medications Medication[] // Relación uno-a-muchos con Medicamentos
}

// Modelo de Medicamentos (igual que antes)
model Medication {
  id                String   @id @default(cuid())
  name              String
  dosage            String? // Ej: "1 comprimido", "10ml"
  currentStock      Int
  lowStockThreshold Int      @default(5) // Umbral para aviso
  takeTime          String? // Ej: "08:00", "Al mediodía".
  frequency         String? // Ej: "Cada 12 horas", "Diario"
  notes             String?  @db.Text
  profileId         String // Clave foránea a Profile
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
